var documenterSearchIndex = {"docs":
[{"location":"allen_neuropixels/#AllenNeuropixels._phaselockingindex-Tuple{AbstractVector{<:AllenNeuropixels.AbstractBurst}, AbstractVector, Number}","page":"AllenNeuropixels","title":"AllenNeuropixels._phaselockingindex","text":"Calculate the phase-locking index using the wavelet transform masks stored in each bursts. Drops any bursts that do not have wavelet information at the specified frequency, f. If centre is true, the phase of spikes in each burst is centred to the mean phase in each burst. Only consider bursts with at least n_spikes spikes, and only count channel-neuron pairs that have n_bursts bursts.\n\n\n\n\n\n","category":"method"},{"location":"allen_neuropixels/#AllenNeuropixels._phaselockingindex-Tuple{AbstractVector{<:AllenNeuropixels.AbstractBurst}, TimeseriesTools.AbstractToolsArray{T, 1, Tuple{A}} where {T, A<:DimensionalData.Dimensions.TimeDim}, Number}","page":"AllenNeuropixels","title":"AllenNeuropixels._phaselockingindex","text":"The phase-locking index for bursts and an LFP signal\n\n\n\n\n\n","category":"method"},{"location":"allen_neuropixels/#AllenNeuropixels.aggregatefit-Tuple{AbstractVector{<:AllenNeuropixels.AbstractBurst}}","page":"AllenNeuropixels","title":"AllenNeuropixels.aggregatefit","text":"Returns a function that evaluates the Gaussian fits of a collection of bursts at any time and log-frequency value\n\n\n\n\n\n","category":"method"},{"location":"allen_neuropixels/#AllenNeuropixels.burstcurvature!","page":"AllenNeuropixels","title":"AllenNeuropixels.burstcurvature!","text":"thresh is a proportion of the average gradient of the wavelet spectrum below which a gradie\n\n\n\n\n\n","category":"function"},{"location":"allen_neuropixels/#AllenNeuropixels.burstthreshold!-Tuple{TimeseriesTools.AbstractToolsArray{T, 2, Tuple{A, B}} where {T, A<:DimensionalData.Dimensions.Ti, B<:Log𝑓}, Any}","page":"AllenNeuropixels","title":"AllenNeuropixels.burstthreshold!","text":"Threshold a wavelet spectrum using either a percentile cutoff (method=:percentile) or a standard deviation cutoff (method=:std) of either each frequency band (eachfreq=true) or the entire spectrum. You probably want to FOOOF the spectrum before this\n\n\n\n\n\n","category":"method"},{"location":"allen_neuropixels/#AllenNeuropixels.detectbursts-Tuple{TimeseriesTools.AbstractToolsArray{T, 2, Tuple{A, B}} where {T, A<:DimensionalData.Dimensions.Ti, B<:Log𝑓}}","page":"AllenNeuropixels","title":"AllenNeuropixels.detectbursts","text":"Detect bursts from a supplied wavelet spectrum, using thresholding boundingstretch increases the bounding box slightly so for a more accurate fit. Give as a proportion of the threshold bounding box detection can be _detectbursts or mmap_detectbursts\n\n\n\n\n\n","category":"method"},{"location":"allen_neuropixels/#AllenNeuropixels.phaselockingindex-Tuple{TimeseriesTools.AbstractToolsArray{T, 2, Tuple{A, B}} where {T, A<:DimensionalData.Dimensions.Ti, B<:Log𝑓}, AbstractVector}","page":"AllenNeuropixels","title":"AllenNeuropixels.phaselockingindex","text":"Buzsaki's phase-locking index (\"Gamma rhythm communication between entorhinal cortex and dentate gyrus neuronal assemblies\")\n\n\n\n\n\n","category":"method"},{"location":"allen_neuropixels/#AllenNeuropixels.predictionerror-Tuple{Any, Any}","page":"AllenNeuropixels","title":"AllenNeuropixels.predictionerror","text":"Calculate the prediction error of variables 1 to variables 2 and vice versa. The output contains prediction errors. If used with spike matrices probably want to transpose those\n\n\n\n\n\n","category":"method"},{"location":"allen_neuropixels/#AllenNeuropixels.randomisebursts-Tuple{AbstractVector{<:AllenNeuropixels.AbstractBurst}}","page":"AllenNeuropixels","title":"AllenNeuropixels.randomisebursts","text":"Shuffle times of a burst vector\n\n\n\n\n\n","category":"method"},{"location":"allen_neuropixels/#AllenNeuropixels.rbfdistance-Tuple{AbstractVector, AbstractVector}","page":"AllenNeuropixels","title":"AllenNeuropixels.rbfdistance","text":"x and y are vectors containing spike times\n\n\n\n\n\n","category":"method"},{"location":"allen_neuropixels/#AllenNeuropixels.surrogatefilter!-Tuple{AbstractVector{<:AllenNeuropixels.AbstractBurst}, AbstractVector{<:AllenNeuropixels.AbstractBurst}}","page":"AllenNeuropixels","title":"AllenNeuropixels.surrogatefilter!","text":"Filter a vector of bursts based of a vector of surrogate bursts\n\n\n\n\n\n","category":"method"},{"location":"allen_neuropixels/#AllenNeuropixels.thetafeature","page":"AllenNeuropixels","title":"AllenNeuropixels.thetafeature","text":"Detect time series with strong theta events using the automutual information\n\n\n\n\n\n","category":"function"},{"location":"allen_neuropixels/#AllenNeuropixels.thetafeature-Tuple{Vector{<:AbstractVector}}","page":"AllenNeuropixels","title":"AllenNeuropixels.thetafeature","text":"Calculate the thetafeature for each stimulus presentation\n\n\n\n\n\n","category":"method"},{"location":"allen_neuropixels/#AllenNeuropixels.Plots.plotbrain!-Tuple{Any, AbstractSession}","page":"AllenNeuropixels","title":"AllenNeuropixels.Plots.plotbrain!","text":"plotbrain!(ax, S::AN.AbstractSession; dotext = :cortex, dostructures = true,\n            ids = :targets, probestyle = :lines, dark = false, meshparams = ())\n\nPlot a 3D representation of the brain with probes and structures.\n\nArguments\n\nax::AbstractPlotting.Axis: The axis to plot on.\nS::AN.AbstractSession: The session object containing the data.\ndotext::Symbol=:cortex: Whether to display text labels for the probes or the cortical structures.\ndostructures::Bool=true: Whether to plot the brain structures.\nids::Symbol=:targets: Which structures to plot. Can be :all, :corticaltargets, :targets, or a vector of structure IDs.\nprobestyle::Symbol=:lines: Whether to plot the probes as lines or meshscatter.\ndark::Bool=false: Whether to use a dark theme.\nmeshparams::NamedTuple=(): Additional parameters to pass to the mesh! function.\n\nReturns\n\nA tuple containing the color observables and the probe plots.\n\nExample\n\nS = ANB.VisualBehavior.Session(1067588044)\nf = Figure(; size = (1920, 1080))\nax = Axis3(f[1, 1]; aspect = :data)\nc, p = AN.Plots.plotbrain!(ax, S; dark = false)\n\n\n\n\n\n","category":"method"},{"location":"allen_neuropixels/#AllenNeuropixels.Plots.plotbrainstructure!-Tuple{Any, Any}","page":"AllenNeuropixels","title":"AllenNeuropixels.Plots.plotbrainstructure!","text":"plotbrainstructure!(ax, id; hemisphere)\n\nPlot a brain structure with the given ID on the given axis.\n\nArguments\n\nax::AbstractPlotting.Axis: The axis to plot on.\nid::Int: The ID of the brain structure to plot.\nhemisphere::Symbol: The hemisphere to plot the structure on. Default is :both.\n\nExample\n\nD = AllenNeuropixels.getstructureidmap()\nid = D[\"root\"] # The whole brain\n\nf = Figure(; size = (1920, 1080))\nax = Axis3(f[1, 1]; aspect = :data)\np = AN.Plots.plotbrainstructure!(ax, id; hemisphere=:both)\n\n\n\n\n\n","category":"method"},{"location":"allen_neuropixels/#AllenNeuropixels.Plots.traces-Tuple{Any, AbstractArray}","page":"AllenNeuropixels","title":"AllenNeuropixels.Plots.traces","text":"We'll plot the columns of this array as traces of their mean values. x is the lag index of each row, tracez is the value with which to color each trace (column) and X is an array of trace data.\n\n\n\n\n\n","category":"method"},{"location":"allen_neuropixels_base/#AllenNeuropixelsBase._getlfp-Tuple{AbstractSession, Int64}","page":"AllenNeuropixelsBase","title":"AllenNeuropixelsBase._getlfp","text":"Get the lfp data for a probe, providing indices for channels and times. See function below for indexing by channel ids and time values/intervals\n\n\n\n\n\n","category":"method"},{"location":"allen_neuropixels_base/#AllenNeuropixelsBase.alignlfp-Tuple{Any, Any, Val{:flashes}}","page":"AllenNeuropixelsBase","title":"AllenNeuropixelsBase.alignlfp","text":"For flashes alignment, trail=false will return only the data from within the flash period. trail=onset will return the data from the onset of the flash to the onset of the flash through to the onset of the next flash. trail=offset will return the data from the offset of the flash to the onset of the next flash.\n\n\n\n\n\n","category":"method"},{"location":"allen_neuropixels_base/#AllenNeuropixelsBase.formatspikes-Tuple{}","page":"AllenNeuropixelsBase","title":"AllenNeuropixelsBase.formatspikes","text":"A function to easily grab formatted spike data for a given session, using some sensible default parameters\n\n\n\n\n\n","category":"method"},{"location":"allen_neuropixels_base/#AllenNeuropixelsBase.getdownsampledlfp-Tuple{Any, Any}","page":"AllenNeuropixelsBase","title":"AllenNeuropixelsBase.getdownsampledlfp","text":"If you want to downsample the LFP data, its quicker to use this function and then perform slicing afterwards (since getlfp() has to check all of the time coordinates you supply, which can be slow).\n\n\n\n\n\n","category":"method"},{"location":"allen_neuropixels_base/#AllenNeuropixelsBase.getlfp-Tuple{AbstractSession, Int64, Union{AbstractString, Vector{<:AbstractString}}}","page":"AllenNeuropixelsBase","title":"AllenNeuropixelsBase.getlfp","text":"Now we can overload getlfp() to index by structure\n\n\n\n\n\n","category":"method"},{"location":"allen_neuropixels_base/#AllenNeuropixelsBase.getlfp-Tuple{AbstractSession, Int64}","page":"AllenNeuropixelsBase","title":"AllenNeuropixelsBase.getlfp","text":"This is the one you should be using. Get lfp data by channel id and time intervals or vector. Also, throw error if you try to access an invalid time interval.\n\n\n\n\n\n","category":"method"},{"location":"allen_neuropixels_base/#AllenNeuropixelsBase.getprobes-Tuple{}","page":"AllenNeuropixelsBase","title":"AllenNeuropixelsBase.getprobes","text":"`getprobes()`\n\nRead the probe data from the EcephysProjectCache object returned by ecephyscache() and return it as a DataFrame.\n\nReturns\n\nA DataFrame containing the probe data.\n\n\n\n\n\n","category":"method"},{"location":"allen_neuropixels_base/#AllenNeuropixelsBase.getsessiontable-Tuple{}","page":"AllenNeuropixelsBase","title":"AllenNeuropixelsBase.getsessiontable","text":"getsessiontable — Read and return the session table from the EcephysProjectCache\n\n`getsessiontable()`\n\nRead the session table data from the EcephysProjectCache object returned by ecephyscache and returns it as a DataFrame.\n\n\n\n\n\n","category":"method"},{"location":"allen_neuropixels_base/#AllenNeuropixelsBase.getspikes","page":"AllenNeuropixelsBase","title":"AllenNeuropixelsBase.getspikes","text":"We combine the spike times and spike amplitudes into one sparse array, using a given bin width.\n\n\n\n\n\n","category":"function"},{"location":"allen_neuropixels_base/#AllenNeuropixelsBase.interpmatch-Tuple{TimeseriesTools.AbstractToolsArray{T, 1, Tuple{A}} where {T, A<:DimensionalData.Dimensions.TimeDim}, TimeseriesTools.AbstractToolsArray{T, 1, Tuple{A}} where {T, A<:DimensionalData.Dimensions.TimeDim}}","page":"AllenNeuropixelsBase","title":"AllenNeuropixelsBase.interpmatch","text":"Match the time indices of the first input DimVector to the second by interpolating the first\n\n\n\n\n\n","category":"method"},{"location":"allen_neuropixels_base/#AllenNeuropixelsBase.loaddataframe","page":"AllenNeuropixelsBase","title":"AllenNeuropixelsBase.loaddataframe","text":"loaddataframe(file, dir=datadir)::DataFrame\n\nLoad a CSV file into a DataFrame.\n\nArguments:\n\nfile: A string representing the name of the CSV file to be loaded.\ndir (optional): A string representing the directory containing the CSV file. Default is datadir.\n\nReturns:\n\nA DataFrame object containing the contents of the CSV file.\n\nExample:\n\nusing DataFrames\ndf = loaddataframe(\"mydata.csv\", \"/path/to/my/data/\")\n\n\n\n\n\n","category":"function"},{"location":"allen_neuropixels_base/#AllenNeuropixelsBase.matchlfp-Tuple{Any, Any}","page":"AllenNeuropixelsBase","title":"AllenNeuropixelsBase.matchlfp","text":"Adjust the times of LFP matrix Y so that they match the matrix X\n\n\n\n\n\n","category":"method"},{"location":"allen_neuropixels_base/#AllenNeuropixelsBase.spikematrix","page":"AllenNeuropixelsBase","title":"AllenNeuropixelsBase.spikematrix","text":"Construct a sparse array of spike counts from a Dict of spike times\n\n\n\n\n\n","category":"function"},{"location":"allen_neuropixels_base/#AllenNeuropixelsBase.VisualBehavior.datapaths-Tuple{}","page":"AllenNeuropixelsBase","title":"AllenNeuropixelsBase.VisualBehavior.datapaths","text":" datapaths()\n\nGet the paths to the visual behavior neuropixels data on Amazon S3 as a tree-like dictionary.\n\n\n\n\n\n","category":"method"},{"location":"allen_neuropixels_base/#AllenNeuropixelsBase.VisualBehavior.filetree-Tuple{Vector{String}}","page":"AllenNeuropixelsBase","title":"AllenNeuropixelsBase.VisualBehavior.filetree","text":"filetree(paths::Vector{String})\n\nCreates a dictionary-like object representing the directory and file structure from a list of file paths.\n\nArguments:\n\npaths: A vector of file paths to include in the tree.\n\nReturns:\n\ndict_tree : A dictionary-like object representing the directory and file structure.\n\n\n\n\n\n","category":"method"},{"location":"allen_neuropixels_base/#AllenNeuropixelsBase.VisualBehavior.getmanifesturl","page":"AllenNeuropixelsBase","title":"AllenNeuropixelsBase.VisualBehavior.getmanifesturl","text":"getmanifesturl(manifest_version=\"0.5.0\")\n\nReturn the URL for the neuropixels visual behavior project manifest file hosted on a given hostname server and version manifest_version.\n\nArguments\n\nmanifest_version::String: The version of the manifest file. Default value is \"0.5.0\".\n\nOther manifest version numbers can be identified here: https://s3.console.aws.amazon.com/s3/buckets/visual-behavior-neuropixels-data?prefix=visual-behavior-neuropixels%2Fmanifests%2F&region=us-west-2\n\n\n\n\n\n","category":"function"},{"location":"allen_neuropixels_base/#AllenNeuropixelsBase.VisualBehavior.getsessionfiles-Tuple{}","page":"AllenNeuropixelsBase","title":"AllenNeuropixelsBase.VisualBehavior.getsessionfiles","text":"getsessionfiles()\n\nReturn a dictionary mapping session IDs to their corresponding file paths.\n\n\n\n\n\n","category":"method"},{"location":"#AllenNeuropixels","page":"Home","title":"AllenNeuropixels","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"AllenNeuropixels.jl is a Julia package for loading, analyzing, and visualizing data from the Allen Neuropixels mouse electrophysiology datasets (Visual Coding and Visual Behavior).","category":"page"},{"location":"#Features","page":"Home","title":"Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Load, filter, and partition LFP and spike-band data (see AllenNeuropixelsBase.jl)\nCalculate channel and unit depths (along the probe length, or along atlas streamlines)\nICA, PCA, CCA, spectral (including FOOOF), wavelet, and burst-based analysis\nVisualize spike rasters, wavelet spectrograms, burst masks, and 3D renders of the mouse reference atlas (including probe locations)","category":"page"},{"location":"#Examples","page":"Home","title":"Examples","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Below we provide some basic examples for Visual Coding dataset.","category":"page"},{"location":"#Installing-and-initializing","page":"Home","title":"Installing and initializing","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To install AllenNeuropixels.jl and set a custom directory for data downloads (the default is a scratchspace):","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg\nPkg.add(\"AllenNeuropixels\") # Please see the AllenSDK.jl readme for any python-related troubles\nimport AllenNeuropixels as AN\nAN.setdatadir(\"~/Downloads/AllenNeuropixelsData/\") # Then restart Julia","category":"page"},{"location":"#Listing-sessions","page":"Home","title":"Listing sessions","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The dataset is divided into recording sessions, each with a unique ID. Sessions last for about 3 hours and follow standardized stimulus templates. One mouse can have multiple recording sessions. To access the session table (containing metadata such as session id, session type, mouse age, genotype, etc.) and select a session by id:","category":"page"},{"location":"","page":"Home","title":"Home","text":"seshtable = AN.getsessiontable() # Or AN.VisualBehavior.getsessiontable() for the Visual Behavior dataset\nsessionid = seshtable[1, :id]\nsession = AN.Session(sessionid) # This can take a few moments","category":"page"},{"location":"","page":"Home","title":"Home","text":"An instance of the AN.Session type holds the python objects for a given session that interface with the AllenSDK.","category":"page"},{"location":"#Querying-probes,-channels,-epochs,-and-stimuli","page":"Home","title":"Querying probes, channels, epochs, and stimuli","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The recording for each session are made synchronously across six probes, each with hundreds of channels. To retrieve the probe metadata, channel metadata, and stimulus metadata for a given AN.Session:","category":"page"},{"location":"","page":"Home","title":"Home","text":"probes = AN.getprobes(session) # Can also be AN.getprobes() to list all probes in the Visual Coding dataset\nchannels = AN.getchannels(session) # Or AN.getchannels()\nepochs = AN.getepochs(session) # A Dataframe of stimulus epoch metadata\nstimuli = AN.getstimuli(session) # A Dataframe for individual stimulus presentations","category":"page"},{"location":"#Loading-LFP-data","page":"Home","title":"Loading LFP data","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To load the LFP data for a particular session, during a particular stimulus epoch (see epochs.stimulus_name), for channels in a particular brain region (structure; see channels.ecephys_structure_acronym):","category":"page"},{"location":"","page":"Home","title":"Home","text":"LFP = AN.formatlfp(session; stimulus=\"flashes\", structure=\"VISl\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"This will return a TimeSeries containing LFP data with (rectified) timestamps and channel ids. The raw LFP (with original timestamps) can be accessed using AN.getlfp. To calculate depths for the LFP channels:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using TimeseriesTools\nchannelids = lookup(LFP, Chan)\nprobedepths = AN.getchanneldepths(session, channelids; method=:probe) # From the cortical surface along probe depths (μm)\nstreamlinedepths = AN.getchanneldepths(session, channelids; method=:streamlines) # Along streamlines (%)","category":"page"},{"location":"#Loading-spike-data","page":"Home","title":"Loading spike data","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To load a dictionary of spike times for a given session and structure, use:","category":"page"},{"location":"","page":"Home","title":"Home","text":"spikes = AN.getspiketimes(session, \"VISl\")\nprobeid = TimeseriesTools.metadata(LFP)[:probeid]\nspikedepths = AN.getunitdepths(session, probeid, keys(spikes); method=:streamlines)","category":"page"},{"location":"","page":"Home","title":"Home","text":"These spikes trains can then be aligned to different stimuli using information from the metadata tables above.","category":"page"},{"location":"#Plotting","page":"Home","title":"Plotting","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"With Makie loaded, you can access the plotting utilites (src/Plots/). For example, you can plot the CCFv3 structure meshes with:","category":"page"},{"location":"","page":"Home","title":"Home","text":"using CairoMakie\nD = AN.getstructureidmap()\nroot = D[\"root\"] # The whole brain\nVISl = D[\"VISl\"] # One structure\n\nf = Figure(; size = (720, 560))\nax = Axis3(f[1, 1]; aspect = :data)\np = AN.Plots.plotbrainstructure!(ax, root; hemisphere=:both)\np = AN.Plots.plotbrainstructure!(ax, VISl; hemisphere=:both)\nf","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: example_brain_plot) Or, for a more complete plot, with the Neuropixels probes:","category":"page"},{"location":"","page":"Home","title":"Home","text":"f = Figure(; size = (720, 560))\nax = Axis3(f[1, 1]; aspect = :data)\np = AN.Plots.plotbrain!(ax, session; hemisphere=:both, dotext=false)\nf","category":"page"},{"location":"","page":"Home","title":"Home","text":"(Image: example_probe_plot)","category":"page"}]
}
